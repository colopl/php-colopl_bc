<?php

declare(strict_types=1);

namespace Colopl\ColoplBc\Tests\Extension;

use Colopl\ColoplBc\Tests\AbstractTestCase;
use Exception;

final class PHP74Test extends AbstractTestCase
{
    public function testKSort(): void
    {
        $array = ['a' => 1, 'b' => 1, 'c' => 1, 'd' => 1, 'e' => 1, 'f' => 1, 'g' => 1, 'h' => 1, 'i' => 1, 'j' => 1, 'k' => 1, 'l' => 1, '0' => 1, '' => 1, 'm' => 1, 'o' => 1, 'p' => 1, 'q' => 1, 'r' => 1, 's' => 1, 't' => 1, 'u' => 1, 'v' => 1, 'w' => 1, 'x' => 1, 'y' => 1, 'z' => 1];
        \Colopl\ColoplBc\Php74\ksort($array);
        self::assertSame(
            $array,
            [
                '' => 1,
                0 => 1,
                'a' => 1,
                'b' => 1,
                'c' => 1,
                'd' => 1,
                'e' => 1,
                'f' => 1,
                'g' => 1,
                'h' => 1,
                'i' => 1,
                'j' => 1,
                'k' => 1,
                'l' => 1,
                'm' => 1,
                'o' => 1,
                'p' => 1,
                'q' => 1,
                'r' => 1,
                's' => 1,
                't' => 1,
                'u' => 1,
                'v' => 1,
                'w' => 1,
                'x' => 1,
                'y' => 1,
                'z' => 1,
            ]
        );
    }

    public function testKRSort(): void
    {
        $array = ['a' => 1, 'b' => 1, 'c' => 1, 'd' => 1, 'e' => 1, 'f' => 1, 'g' => 1, 'h' => 1, 'i' => 1, 'j' => 1, 'k' => 1, 'l' => 1, '0' => 1, '' => 1, 'm' => 1, 'o' => 1, 'p' => 1, 'q' => 1, 'r' => 1, 's' => 1, 't' => 1, 'u' => 1, 'v' => 1, 'w' => 1, 'x' => 1, 'y' => 1, 'z' => 1];
        \Colopl\ColoplBc\Php74\krsort($array);
        self::assertSame(
            $array,
            [
                'z' => 1,
                'y' => 1,
                'x' => 1,
                'w' => 1,
                'v' => 1,
                'u' => 1,
                't' => 1,
                's' => 1,
                'r' => 1,
                'q' => 1,
                'p' => 1,
                'o' => 1,
                'm' => 1,
                'l' => 1,
                'k' => 1,
                'j' => 1,
                'i' => 1,
                'h' => 1,
                'g' => 1,
                'f' => 1,
                'e' => 1,
                'd' => 1,
                'c' => 1,
                'b' => 1,
                'a' => 1,
                0 => 1,
                '' => 1,
            ]
        );
    }

    public function testASort(): void
    {
        $array = ['a' => 1, 'b' => 1, 'c' => 1, 'd' => 1, 'e' => 1, 'f' => 1, 'g' => 1, 'h' => 1, 'i' => 1, 'j' => 1, 'k' => 1, 'l' => 1, '0' => 1, '' => 1, 'm' => 1, 'o' => 1, 'p' => 1, 'q' => 1, 'r' => 1, 's' => 1, 't' => 1, 'u' => 1, 'v' => 1, 'w' => 1, 'x' => 1, 'y' => 1, 'z' => 1];
        \Colopl\ColoplBc\Php74\asort($array);
        self::assertSame(
            $array,
            [
                'a' => 1,
                'm' => 1,
                'y' => 1,
                'x' => 1,
                'w' => 1,
                'v' => 1,
                'u' => 1,
                't' => 1,
                's' => 1,
                'r' => 1,
                'q' => 1,
                'p' => 1,
                'o' => 1,
                '' => 1,
                'b' => 1,
                0 => 1,
                'l' => 1,
                'k' => 1,
                'j' => 1,
                'i' => 1,
                'h' => 1,
                'g' => 1,
                'f' => 1,
                'e' => 1,
                'd' => 1,
                'c' => 1,
                'z' => 1,
            ]
        );
    }

    public function testARSort(): void
    {
        $array = ['a' => 1, '0' => 1, '' => 1, 'b' => 1, 'c' => 1, 'd' => 1, 'e' => 1, 'f' => 1, 'g' => 1, 'h' => 1, 'i' => 1, 'j' => 1, 'k' => 1, 'l' => 1, 'm' => 1, 'o' => 1, 'p' => 1, 'q' => 1, 'r' => 1, 's' => 1, 't' => 1, 'u' => 1, 'v' => 1, 'w' => 1, 'x' => 1, 'y' => 1, 'z' => 1];
        \Colopl\ColoplBc\Php74\arsort($array);
        self::assertSame(
            $array,
            [
                'a' => 1,
                'm' => 1,
                'y' => 1,
                'x' => 1,
                'w' => 1,
                'v' => 1,
                'u' => 1,
                't' => 1,
                's' => 1,
                'r' => 1,
                'q' => 1,
                'p' => 1,
                'o' => 1,
                'l' => 1,
                0 => 1,
                'k' => 1,
                'j' => 1,
                'i' => 1,
                'h' => 1,
                'g' => 1,
                'f' => 1,
                'e' => 1,
                'd' => 1,
                'c' => 1,
                'b' => 1,
                '' => 1,
                'z' => 1,
            ]
        );
    }

    public function testSort(): void
    {
        $array = ['0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, ''];
        \Colopl\ColoplBc\Php74\sort($array);
        self::assertSame(
            $array,
            [
                0 => '',
                1 => '',
                2 => '',
                3 => '',
                4 => '',
                5 => '',
                6 => '',
                7 => '',
                8 => '',
                9 => 0,
                10 => '',
                11 => '',
                12 => '',
                13 => '',
                14 => '',
                15 => '0',
                16 => '0',
                17 => 0,
                18 => '0',
                19 => 0,
                20 => '0',
                21 => 0,
                22 => '0',
                23 => 0,
                24 => '0',
                25 => '0',
                26 => 0,
                27 => 0,
                28 => 0,
                29 => '0',
                30 => 0,
                31 => '0',
                32 => 0,
                33 => '0',
                34 => '0',
                35 => '0',
                36 => 0,
                37 => '0',
                38 => 0,
                39 => '0',
                40 => 0,
                41 => 0,
                42 => '0',
                43 => 0,
                44 => 0,
                45 => '',
                46 => 0,
                47 => '',
                48 => '',
                49 => '0',
                50 => 0,
                51 => '0',
                52 => 0,
                53 => '0',
                54 => 0,
                55 => '',
                56 => '0',
                57 => '0',
                58 => 0,
                59 => '',
                60 => '',
                61 => '',
                62 => '0',
                63 => 0,
                64 => '0',
                65 => 0,
                66 => '',
                67 => '',
                68 => '',
                69 => 0,
                70 => '',
                71 => 0,
                72 => '',
                73 => 0,
                74 => '',
                75 => 0,
                76 => '',
                77 => '0',
                78 => '0',
                79 => 0,
                80 => '',
                81 => '0',
                82 => '0',
                83 => '0',
                84 => 0,
                85 => '0',
                86 => '0',
            ]
        );
    }

    public function testRSort(): void
    {
        $array = ['0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, '', '0', 0, ''];
        \Colopl\ColoplBc\Php74\rsort($array);
        self::assertSame(
            $array,
            [
                0 => '0',
                1 => '0',
                2 => 0,
                3 => '0',
                4 => 0,
                5 => '0',
                6 => 0,
                7 => '0',
                8 => 0,
                9 => '0',
                10 => 0,
                11 => '0',
                12 => 0,
                13 => '0',
                14 => 0,
                15 => 0,
                16 => '0',
                17 => 0,
                18 => '0',
                19 => 0,
                20 => '0',
                21 => 0,
                22 => '0',
                23 => 0,
                24 => 0,
                25 => '0',
                26 => '0',
                27 => '0',
                28 => '',
                29 => '',
                30 => '',
                31 => '',
                32 => '',
                33 => '',
                34 => '',
                35 => '',
                36 => '',
                37 => 0,
                38 => '',
                39 => '',
                40 => '',
                41 => '',
                42 => '',
                43 => 0,
                44 => 0,
                45 => '',
                46 => 0,
                47 => '0',
                48 => '',
                49 => 0,
                50 => '0',
                51 => '',
                52 => 0,
                53 => '0',
                54 => 0,
                55 => '0',
                56 => '0',
                57 => '',
                58 => 0,
                59 => '0',
                60 => '',
                61 => 0,
                62 => '0',
                63 => '',
                64 => '',
                65 => 0,
                66 => '0',
                67 => '0',
                68 => '',
                69 => '',
                70 => 0,
                71 => '0',
                72 => '0',
                73 => '0',
                74 => '',
                75 => 0,
                76 => '0',
                77 => '0',
                78 => '',
                79 => 0,
                80 => '',
                81 => 0,
                82 => '',
                83 => 0,
                84 => '',
                85 => 0,
                86 => '',
            ]
        );
    }

    public function testUSort(): void
    {
        $array = range(1, 64);
        \Colopl\ColoplBc\Php74\usort($array, function (int $_left, int $_right): int {
            return 0;
        });
        self::assertSame(
            $array,
            [
                0 => 1,
                1 => 49,
                2 => 36,
                3 => 37,
                4 => 38,
                5 => 39,
                6 => 40,
                7 => 41,
                8 => 42,
                9 => 43,
                10 => 44,
                11 => 45,
                12 => 46,
                13 => 47,
                14 => 48,
                15 => 50,
                16 => 34,
                17 => 51,
                18 => 52,
                19 => 53,
                20 => 54,
                21 => 55,
                22 => 56,
                23 => 57,
                24 => 58,
                25 => 59,
                26 => 60,
                27 => 61,
                28 => 62,
                29 => 63,
                30 => 35,
                31 => 33,
                32 => 2,
                33 => 16,
                34 => 3,
                35 => 4,
                36 => 5,
                37 => 6,
                38 => 7,
                39 => 8,
                40 => 9,
                41 => 10,
                42 => 11,
                43 => 12,
                44 => 13,
                45 => 14,
                46 => 15,
                47 => 17,
                48 => 32,
                49 => 18,
                50 => 19,
                51 => 20,
                52 => 21,
                53 => 22,
                54 => 23,
                55 => 24,
                56 => 25,
                57 => 26,
                58 => 27,
                59 => 28,
                60 => 29,
                61 => 30,
                62 => 31,
                63 => 64,
            ]
        );
    }

    public function testUASort(): void
    {
        $array = range(1, 64);
        \Colopl\ColoplBc\Php74\uasort($array, function (int $_left, int $_right): int {
            return 0;
        });
        self::assertSame(
            $array,
            [
                0 => 1,
                48 => 49,
                35 => 36,
                36 => 37,
                37 => 38,
                38 => 39,
                39 => 40,
                40 => 41,
                41 => 42,
                42 => 43,
                43 => 44,
                44 => 45,
                45 => 46,
                46 => 47,
                47 => 48,
                49 => 50,
                33 => 34,
                50 => 51,
                51 => 52,
                52 => 53,
                53 => 54,
                54 => 55,
                55 => 56,
                56 => 57,
                57 => 58,
                58 => 59,
                59 => 60,
                60 => 61,
                61 => 62,
                62 => 63,
                34 => 35,
                32 => 33,
                1 => 2,
                15 => 16,
                2 => 3,
                3 => 4,
                4 => 5,
                5 => 6,
                6 => 7,
                7 => 8,
                8 => 9,
                9 => 10,
                10 => 11,
                11 => 12,
                12 => 13,
                13 => 14,
                14 => 15,
                16 => 17,
                31 => 32,
                17 => 18,
                18 => 19,
                19 => 20,
                20 => 21,
                21 => 22,
                22 => 23,
                23 => 24,
                24 => 25,
                25 => 26,
                26 => 27,
                27 => 28,
                28 => 29,
                29 => 30,
                30 => 31,
                63 => 64,
            ]
        );
    }

    public function testUKSort(): void
    {
        $array = range(1, 64);
        \Colopl\ColoplBc\Php74\uksort($array, function (int $_left, int $_right): int {
            return 0;
        });
        self::assertSame(
            $array,
            [
                0 => 1,
                48 => 49,
                35 => 36,
                36 => 37,
                37 => 38,
                38 => 39,
                39 => 40,
                40 => 41,
                41 => 42,
                42 => 43,
                43 => 44,
                44 => 45,
                45 => 46,
                46 => 47,
                47 => 48,
                49 => 50,
                33 => 34,
                50 => 51,
                51 => 52,
                52 => 53,
                53 => 54,
                54 => 55,
                55 => 56,
                56 => 57,
                57 => 58,
                58 => 59,
                59 => 60,
                60 => 61,
                61 => 62,
                62 => 63,
                34 => 35,
                32 => 33,
                1 => 2,
                15 => 16,
                2 => 3,
                3 => 4,
                4 => 5,
                5 => 6,
                6 => 7,
                7 => 8,
                8 => 9,
                9 => 10,
                10 => 11,
                11 => 12,
                12 => 13,
                13 => 14,
                14 => 15,
                16 => 17,
                31 => 32,
                17 => 18,
                18 => 19,
                19 => 20,
                20 => 21,
                21 => 22,
                22 => 23,
                23 => 24,
                24 => 25,
                25 => 26,
                26 => 27,
                27 => 28,
                28 => 29,
                29 => 30,
                30 => 31,
                63 => 64,
            ]
        );
    }

    public function testInArray(): void
    {
        self::assertTrue(
            \Colopl\ColoplBc\Php74\in_array('', [0])
        );
    }

    public function testArraySearch(): void
    {
        self::assertSame(
            \Colopl\ColoplBc\Php74\array_search('', ['first' => 0, 'second' => '']),
            'first'
        );
    }

    public function testArrayKeys(): void
    {
        self::assertSame(
            \Colopl\ColoplBc\Php74\array_keys(['first' => 0, 'second' => ''], ''),
            [
                'first',
                'second',
            ]
        );
    }

    public function testArrayMultisort(): void
    {
        if (!\extension_loaded('colopl_bc')) {
            self::expectException(Exception::class);
        }
        $ary1 = \array_fill(0, 100, 0);
        $origAry2 = $ary2 = \array_merge(...\array_fill(0, 50, [0, '0']));
        \Colopl\ColoplBc\Php74\array_multisort($ary1, $ary2);
        /** @phpstan-ignore-next-line  */
        self::assertNotSame($ary2, $origAry2);
    }

    public function testEq(): void
    {
        self::assertTrue(
            \Colopl\ColoplBc\Php74\eq(0, '')
        );
    }

    public function testNeq(): void
    {
        self::assertFalse(
            \Colopl\ColoplBc\Php74\neq(0, '')
        );
    }

    public function testLt(): void
    {
        self::assertFalse(
            \Colopl\ColoplBc\Php74\lt(0, 'a')
        );
    }

    public function testLte(): void
    {
        self::assertTrue(
            \Colopl\ColoplBc\Php74\lte(0, '')
        );
    }

    public function testGt(): void
    {
        self::assertFalse(
            \Colopl\ColoplBc\Php74\gt('a', 0)
        );
    }

    public function testGte(): void
    {
        self::assertTrue(
            \Colopl\ColoplBc\Php74\gte(0, '')
        );
    }

    public function testSpaceship(): void
    {
        self::assertSame(
            \Colopl\ColoplBc\Php74\spaceship('', 0),
            0
        );
    }
}
